function [bords tWalls maxi mini]=findFlameBorders2(FFC,t,f,graph)
global editing simulating
figure(2)
clf
if ( max(size(f))==1)
    f1=f;
    f2=f;
elseif (max(size(f))==2 && min(size(f))==1)
    f1=f(1);
    f2=f(2);
else
    
end
sz=size(FFC.signals.values(1,:,:));
y=zeros(sz(2:3));
mini=zeros(1,sz(3));
mini(:)=nan;
maxi=mini;

for i=1:sz(3)
    y(:,i)=FFC.signals.values(1,:,i);
    mini(i)=min(y(:,i));
    maxi(i)=max(y(:,i));

end


i=max(find(maxi(1:round(size(maxi,2)/2))==0));%find to point after which no points are zero
maxi(1:i)=nan;
mini(1:i)=nan;

maxi(maxi==0)=nan;
mini(mini==0)=nan;


[fitresultMin, gofMin]=exponentialRegression(t, mini,[20  0.5    0  ],[Inf Inf 10 ], [0  0  0 ],graph);

if (graph)
    hold on;
end
[fitresultMax, gofMax]=exponentialRegression(t, maxi,[-20  0.5    8.5 ],[0 Inf 10 ], [-inf  0 0  ],graph);

if(graph)
    hold off
end

k1=coeffvalues(fitresultMin);
k2=coeffvalues(fitresultMax);

mid=(k1(3)+k2(3))/2;
bords(1)=mid-f1*(mid-k1(3));
bords(2)=f2*(k2(3)-mid)+mid;

tWalls(1)=min(t(mini<bords(1)));
tWalls(2)=min(t(maxi>bords(2)));

if(graph)
   figure(2);
   hold on;
    plot([0 max(t)], [ bords(1) bords(1)],':k');
    plot([0 max(t)], [ bords(2) bords(2)],':k');
    plot([0 max(t)], [k1(3) k1(3)],':r');
    plot([0 max(t)], [k2(3) k2(3)],':r');
    
    plot([tWalls(1) tWalls(1)], [ 0 bords(1)],':k');
    plot([tWalls(2) tWalls(2)], [ 0 bords(2)],':k');
    hold off;
end

if ~simulating
    model_path=[gcs '/Edit Parameters'];
    editing=true;
    set_param(model_path,'fff',['[' num2str(f) ']']);
    editing=false;
end

function [fitresult, gof] = exponentialRegression(t, y, startPoint,maxLimit,minLimit, graph)
%CREATEFIT(T,MINI)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : t
%      Y Output: mini
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 09-Jan-2012 13:43:12

warning off;
%% Fit: 'untitled fit 1'.


t=t(~isnan(y));
y=y(~isnan(y));

[B ja]=unique(y,'last');
ja=sort(ja);
B=y(ja);
ta=t(ja);
j=unique([ja; find(t>ta(length(B)-4))]);

tb=t(j);
B=y(j);




[xData, yData] = prepareCurveData( tb, B );

% Set up fittype and options.
ft = fittype( '(a*exp(-b*(x))+c)', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( ft );
opts.Display = 'Off';
opts.Lower =minLimit;
opts.Robust = 'Bisquare';
opts.Algorithm='trust-region';
opts.StartPoint = startPoint;
opts.Upper =maxLimit;

% Fit model to data.
[fitresult, gof] = fit( xData, yData, ft, opts );

% Plot fit with data.
if(graph)
    figure(2);
    plot(fitresult);
    hold on
    h = plot( t, y,'.',tb,B,'o' );
    hold off
    grid off
    legend('off')
    ylim([0 10]);
    warning on;
end